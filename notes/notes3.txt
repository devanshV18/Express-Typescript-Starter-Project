LOGGING

It keeps track of events in a request or a process in ourr system. It is done to track the procedures, events occured while processing the request or any process. It helps us like clues and leads to understand what happened with the system in case anything goes wrong.

 Why not use console.log thru out our implementation?

 1. non persistence ->> console.log only appear for current terminal session.
 2. log storage
 3. not every flow will have error and require error logging, rather we need multiple types og log like info log, warning log, error log etc. which demands an individual service that helps us intergrate production grade logging.

 logging library - winston.

 winston works by defining/creating a logger object -> configuring it as per our needs by setting different properties and finally exporting the configured logger object. This object can be imported and used through out the project for logging.

 ## Important Properties in Winston logging

 1. Format -> It defines when a log comes up due to an info, warning or error, What should the log actually write.

 2. Transports -> It defines how the logs are to be processed in terms of their storage, are these just going to be printed on terminal or also added to ant file I/o or any db is configured here.

 3. levels -> type of logs like info, warning, error, fatal etc.

 he recommended way to use winston is to create your own logger. The simplest way to do this is using winston.createLogger:

const winston = require('winston');

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.json(),
  defaultMeta: { service: 'user-service' },
  transports: [
    //
    // - Write all logs with importance level of `error` or higher to `error.log`
    //   (i.e., error, fatal, but not other levels)
    //
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    //
    // - Write all logs with importance level of `info` or higher to `combined.log`
    //   (i.e., fatal, error, warn, and info, but not trace)
    //
    new winston.transports.File({ filename: 'combined.log' }),
  ],
});

//
// If we're not in production then log to the `console` with the format:
// `${info.level}: ${info.message} JSON.stringify({ ...rest }) `
//
if (process.env.NODE_ENV !== 'production') {
  logger.add(new winston.transports.Console({
    format: winston.format.simple(),
  }));
} 

//syntax -> logger.level("message" + other configs (if any))
